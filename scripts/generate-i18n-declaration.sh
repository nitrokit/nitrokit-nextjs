#!/bin/bash

# i18n declaration generator script
# Generates type declaration file for next-intl modular structure

set -e

if ! command -v jq &> /dev/null; then
    echo "⚠️  jq is not installed. Please install it to continue. (e.g., 'brew install jq' or 'sudo apt-get install jq')" >&2; exit 1
fi

echo "🔄 Generating i18n declaration file..."

# Define paths
MODULES_PATH="./messages/en"
DECLARATION_FILE="./messages/declarations.json"

# Auto-discover modules by scanning the directory
MODULE_FILES=()
if [ -d "$MODULES_PATH" ]; then
    echo "📂 Scanning modules directory: $MODULES_PATH"
    # Use find to get all .json files recursively
    while IFS= read -r -d $'\0' file; do
        MODULE_FILES+=("$file")
        echo "🔍 Found module file: $file"
    done < <(find "$MODULES_PATH" -name "*.json" -print0)
else
    echo "⚠️  Modules directory not found: $MODULES_PATH"
    echo "📁 Creating modules directory..."
    mkdir -p "$MODULES_PATH"
fi

# If no module files found, create a default one
if [ ${#MODULE_FILES[@]} -eq 0 ]; then
    echo "⚠️  No modules found, creating default modules..."
    DEFAULT_MODULE_FILE="$MODULES_PATH/common.json"
    echo "{}" > "$DEFAULT_MODULE_FILE"
    MODULE_FILES+=("$DEFAULT_MODULE_FILE")
    echo "✨ Created default module: common"
fi

echo "📋 Total module files found: ${#MODULE_FILES[@]}"

# Use jq to merge module files into a single JSON object.
# The key is generated by taking only the filename (without extension) from the input_filename.
# Example: ./messages/en/website/contact.json -> contact
DECLARATION=$(jq -n '[inputs | {key: (input_filename | sub(".*/"; "") | rtrimstr(".json")), value: .}] | from_entries' "${MODULE_FILES[@]}")

# Format the merged JSON with Prettier and write it to the declaration file.
echo "$DECLARATION" | pnpm exec prettier --parser json > "$DECLARATION_FILE"

echo "✅ Generated declaration file: $DECLARATION_FILE"
echo "🎉 i18n declaration generation completed!"