#!/bin/sh
# .husky/pre-commit

echo 'üöÄ Checking if pre-commit validation is needed...'

BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || git branch --show-current 2>/dev/null || echo "unknown")

PROTECTED_BRANCHES=("main")
DEVELOPMENT_BRANCHES=( "preview" "develop")

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

VALIDATION_LEVEL="none"

echo "üìç Current branch: $BRANCH"

for protected_branch in "${PROTECTED_BRANCHES[@]}"; do
    if [[ "$BRANCH" == "$protected_branch" ]]; then
        VALIDATION_LEVEL="full"
        echo "üîí Detected protected branch: $BRANCH"
        break
    fi
done

if [[ "$VALIDATION_LEVEL" == "none" ]]; then
    for dev_branch in "${DEVELOPMENT_BRANCHES[@]}"; do
        if [[ "$BRANCH" == "$dev_branch" ]]; then
            VALIDATION_LEVEL="basic"
            echo "üõ†Ô∏è  Detected development branch: $BRANCH"
            break
        fi
    done
fi

if [[ "$VALIDATION_LEVEL" == "none" ]]; then
    echo -e "${YELLOW}üü° Skipping pre-commit checks for feature branch: $BRANCH${NC}"
    echo -e "${BLUE}üí° Basic checks run on: ${DEVELOPMENT_BRANCHES[*]}${NC}"
    echo -e "${GREEN}üîí Full checks run on: ${PROTECTED_BRANCHES[*]}${NC}"
    exit 0
fi

if [[ "$VALIDATION_LEVEL" == "full" ]]; then
    echo -e "${GREEN}üîí Running FULL validation for protected branch: $BRANCH${NC}"
elif [[ "$VALIDATION_LEVEL" == "basic" ]]; then
    echo -e "${BLUE}üõ†Ô∏è  Running BASIC validation for development branch: $BRANCH${NC}"
fi

run_command() {
    local command="$1"
    local error_message="$2"
    
    echo -e "${BLUE}üîÑ Running: $command${NC}"
    
    if command -v pnpm >/dev/null 2>&1; then
        if ! pnpm run "$command" 2>/dev/null; then
            echo -e "${RED}‚ùå $error_message${NC}"
            return 1
        fi
    elif command -v yarn >/dev/null 2>&1; then
        if ! yarn --ignore-engines run "$command" 2>/dev/null; then
            echo -e "${RED}‚ùå $error_message${NC}"
            return 1
        fi
    elif command -v npm >/dev/null 2>&1; then
        if ! npm run "$command" 2>/dev/null; then
            echo -e "${RED}‚ùå $error_message${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå yarn, pnpm veya npm bulunamadƒ±${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ $command ba≈üarƒ±yla tamamlandƒ±${NC}"
    return 0
}

script_exists() {
    local script_name="$1"
    
    if command -v pnpm >/dev/null 2>&1; then
        pnpm run --help 2>/dev/null | grep -q "^  $script_name" || \
        grep -q "\"$script_name\":" package.json 2>/dev/null
    elif command -v yarn >/dev/null 2>&1; then
        yarn run --help 2>/dev/null | grep -q "^  $script_name" || \
        grep -q "\"$script_name\":" package.json 2>/dev/null
    elif command -v npm >/dev/null 2>&1; then
        npm run 2>/dev/null | grep -q " $script_name$" || \
        grep -q "\"$script_name\":" package.json 2>/dev/null
    else
        return 1
    fi
}

echo -e "\n${YELLOW}üé® Checking code formatting...${NC}"
if script_exists "format:check"; then
    if ! run_command "format:check" "Prettier Check Failed. Run 'yarn format:write', add changes and try commit again."; then
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  format:check script not found in package.json, skipping...${NC}"
fi

echo -e "\n${YELLOW}üìù Checking TypeScript...${NC}"
if script_exists "type-check"; then
    if ! run_command "type-check" "TypeScript Check Failed. Make the changes required above."; then
        exit 1
    fi
elif script_exists "tsc"; then
    if ! run_command "tsc" "TypeScript Check Failed. Make the changes required above."; then
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  TypeScript check script not found, skipping...${NC}"
fi

if [[ "$VALIDATION_LEVEL" == "full" ]]; then
    echo -e "\n${YELLOW}üîç Running ESLint (full validation)...${NC}"
    if script_exists "lint"; then
        if ! run_command "lint" "ESLint Check Failed. Make the required changes listed above, add changes and try to commit again."; then
            exit 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  lint script not found, skipping...${NC}"
    fi

    echo -e "\n${YELLOW}üèóÔ∏è  Building project (full validation)...${NC}"
    if script_exists "build"; then
        if ! run_command "build" "Next build failed: View the errors above to see why."; then
            exit 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  build script not found, skipping...${NC}"
    fi

    echo -e "\n${YELLOW}üß™ Running tests (full validation)...${NC}"
    if script_exists "test"; then
        if ! run_command "test" "Tests failed. Fix the failing tests and try again."; then
            exit 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  test script not found, skipping...${NC}"
    fi
fi

echo -e "\n${YELLOW}üîí Sanitizing .env file before commit...${NC}"

# .env dosyasƒ± var mƒ± kontrol et
if [ -f .env ]; then
    echo -e "${BLUE}üìù Creating/updating .env.example with sanitized values...${NC}"
    
    # Farklƒ± deƒüi≈üken t√ºrleri i√ßin √∂zel √∂rnek deƒüerler
    cat .env | while IFS='=' read -r key value; do
        # Bo≈ü satƒ±rlarƒ± atla
        if [ -z "$key" ]; then
            echo ""
            continue
        fi
        
        # Yorum satƒ±rlarƒ±nƒ± koru
        if echo "$key" | grep -q '^#'; then
            echo "$key"
            continue
        fi
        
        # Deƒüi≈üken adƒ±na g√∂re √∂zel √∂rnek deƒüerler
        case "$key" in
            *API_KEY*|*SECRET*|*TOKEN*|*PASSWORD*)
                echo "${key}=---$(echo ${key} | tr '[:upper:]' '[:lower:]')---"
                ;;
            *URL*|*ENDPOINT*)
                echo "${key}=https://example.com/api"
                ;;
            *PORT*)
                echo "${key}=3000"
                ;;
            *DATABASE*|*DB*)
                echo "${key}=postgresql://user:password@localhost:5432/database"
                ;;
            *EMAIL*)
                echo "${key}=noreply@example.com"
                ;;
            *DOMAIN*|*HOST*)
                echo "${key}=localhost"
                ;;
            *DEBUG*|*LOG*|*VERBOSE*)
                echo "${key}=false"
                ;;
            *ENV*|*NODE_ENV*)
                echo "${key}=development"
                ;;
            *)
                echo "${key}=---example-value---"
                ;;
        esac
    done > .env.example
    
    echo -e "${GREEN}‚úÖ .env.example created/updated with sanitized values${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  .env file not found, skipping sanitization${NC}"
fi

echo -e "\n${GREEN}‚úÖ All checks passed for branch: $BRANCH! Committing now.${NC}"