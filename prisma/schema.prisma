//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// Enums.prisma
//

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK
}

//
// Account.prisma
//

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

//
// Authenticator.prisma
//

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//
// NewsletterSubscriber.prisma
//

model NewsletterSubscriber {
  id         String    @id @default(cuid())
  email      String    @unique
  verified   Boolean   @default(false)
  locale     String    @default("tr")
  token      String?
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?
}

//
// PasswordResetToken.prisma
//

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("password_reset_tokens")
}

//
// Session.prisma
//

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// User.prisma
//

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  twoFactorEnabled     Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret      String?   @map("two_factor_secret")
  twoFactorBackupCodes String[]  @map("two_factor_backup_codes")
  twoFactorVerifiedAt  DateTime? @map("two_factor_verified_at")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Authenticator Authenticator[]
}

//
// VerificationToken.prisma
//

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
